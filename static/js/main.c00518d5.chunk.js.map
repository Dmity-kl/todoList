{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","style","textAlign","TextField","value","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","size","AddCircleOutline","EditableSpan","editMode","setEditMode","onBlur","onChangeValue","autoFocus","event","onDoubleClick","Todolist","newTitle","changeTodoListTitle","id","removeTodoList","aria-label","Delete","tasks","map","t","key","className","isDone","Checkbox","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","Button","variant","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","todoListTask","task","todoListTasks","changeStatus","taskID","find","todoList","tl","removedTodoList","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","margin","Grid","container","spacing","tasksForTodolist","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c00518d5.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddCircleOutline, NoteAdd} from \"@material-ui/icons\";\n\ntype AddItemFormType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm(props: AddItemFormType) {\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null);\n        if (e.charCode === 13) {\n            addTask();\n        }\n    }\n\n    const addTask = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title.trim());\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n\n    return <div style={{textAlign: 'center'} }>\n        <TextField value={title}\n                   label={'add value'}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   error={!!error}\n                   helperText={error}\n        />\n        <IconButton onClick={addTask}\n            color={\"primary\"}\n            size={\"small\"}>\n            <AddCircleOutline/>\n        </IconButton>\n    </div>\n\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChangeValue: (newValue: string) => void\n\n}\n\nexport function EditableSpan(props: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false)\n    let [title, setTitle] = useState('')\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.onChangeValue(title)\n    }\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) => setTitle(event.currentTarget.value)\n\n    return editMode\n        ? <TextField value={title}\n                     onBlur={deactivateEditMode}\n                     autoFocus\n                     onChange={onChangeTitleHandler}\n        />\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\n}","import React, {ChangeEvent} from 'react';\nimport {FilterValuesType} from './App';\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, Checkbox, createTheme, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {purple} from \"@material-ui/core/colors\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todoListID: string) => void\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListID: string) => void\n    changeTaskTitle: (taskId: string, newValue: string, todoListID: string) => void\n    filter: FilterValuesType\n    id: string\n    removeTodoList: (todoListID: string) => void\n    changeTodoListTitle: (newTitle: string, todoListID:string)=>void\n}\n\nexport function Todolist(props: PropsType) {\n\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\n    const removeTodoList = () => {\n        props.removeTodoList(props.id)\n    }\n    const ChangeTodoListTitle = (newTitle:string) => {\n        props.changeTodoListTitle(newTitle, props.id)\n    }\n    //help\n    const addTask = (title: string) => {\n        props.addTask(title, props.id)\n    }\n\n    return <div>\n        <h3 style={{textAlign: 'center'} }> <EditableSpan title={props.title} onChangeValue={ChangeTodoListTitle} />\n            <IconButton onClick={removeTodoList} aria-label=\"delete\">\n                <Delete/>\n            </IconButton>\n        </h3>\n\n        <AddItemForm addItem={addTask}/>\n        <ul>\n            {\n                props.tasks.map(t => {\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                        props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\n                    }\n                    const onChangeTitleHandler = (newValue: string) => {\n                        props.changeTaskTitle(t.id, newValue, props.id);\n                    }\n\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\n                        <Checkbox size={\"small\"}\n                               onChange={onChangeStatusHandler}\n                               checked={t.isDone}/>\n                        <EditableSpan title={t.title}\n                                      onChangeValue={onChangeTitleHandler}\n                        />\n                        <IconButton onClick={onClickHandler} aria-label=\"delete\" size={\"small\"}>\n                            <Delete />\n                        </IconButton>\n                    </div>\n                })\n            }\n        </ul>\n        <div>\n            <Button variant={\"outlined\"} color={props.filter === 'all' ? \"secondary\" : \"default\"}\n                    onClick={onAllClickHandler}>All\n            </Button>\n            <Button variant={\"outlined\"} color={props.filter === 'active' ? \"secondary\" : \"default\"}\n                    onClick={onActiveClickHandler}>Active\n            </Button>\n            <Button variant={\"outlined\"} color={props.filter === 'completed' ? \"secondary\" : \"default\"}\n                    onClick={onCompletedClickHandler}>Completed\n            </Button>\n        </div>\n    </div>\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from './Todolist';\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\n\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodoListsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\ntype TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction App() {\n\n    let todoListID1 = v1()\n    let todoListID2 = v1()\n    let [todoLists, setTodoLists] = useState<Array<TodoListsType>>([\n        {\n            id: todoListID1,\n            title: 'What to learn',\n            filter: 'all'\n        },\n        {\n            id: todoListID2,\n            title: 'What to buy',\n            filter: 'all'\n        }\n    ])\n\n    let [tasks, setTasks] = useState<TasksStateType>({\n        [todoListID1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Rest API\", isDone: false},\n            {id: v1(), title: \"GraphQL\", isDone: false},\n        ], [todoListID2]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Rest API\", isDone: false},\n            {id: v1(), title: \"GraphQL\", isDone: false},\n        ]\n    });\n\n    function removeTask(id: string, todoListID: string) {\n        let todoListTask = tasks[todoListID]\n        tasks[todoListID] = todoListTask.filter(t => t.id !== id);\n        setTasks({...tasks});\n    }\n\n    function addTask(title: string, todoListID: string) {\n        let task = {id: v1(), title: title, isDone: false}\n        let todoListTasks = tasks[todoListID]\n        tasks[todoListID] = [task, ...todoListTasks]\n        setTasks({...tasks})\n    }\n\n    function changeStatus(taskID: string, isDone: boolean, todoListID: string) {\n        //достаем нужный массив по todoLitID\n        let tasksForChangeStatus = tasks[todoListID]\n        //найдем нужную таску\n        let task = tasksForChangeStatus.find(t => t.id === taskID);\n        if (task) {\n            //изменим таску если она нашлась\n            task.isDone = isDone;\n            // засетаем в стейт копию объекта, чтобы React отреагировал и перерисовал\n            setTasks({...tasks});\n        }\n    }\n\n    function changeFilter(value: FilterValuesType, todoListID: string) {\n        let todoList = todoLists.find(tl => tl.id === todoListID)\n        if (todoList) {\n            todoList.filter = value\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function removeTodoList(todoListID: string) {\n        let removedTodoList = todoLists.filter(tl => tl.id !== todoListID)\n        delete tasks[todoListID]\n        setTodoLists(removedTodoList)\n    }\n\n    function changeTodoListTitle(newTitle: string, todoListID: string) {\n        const todoList = todoLists.find(tl => tl.id === todoListID)\n        if (todoList) {\n            todoList.title = newTitle\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function addTodoList(title: string) {\n        let todoList: TodoListsType = {\n            id: v1(),\n            title: title,\n            filter: \"all\",\n        }\n        setTodoLists([todoList, ...todoLists])\n        setTasks({...tasks, [todoList.id]: []})\n    }\n\n    function changeTaskTitle(taskID: string, newValue: string, todoListID: string) {\n        //достаем нужный массив по todoLitID\n        let tasksForChangeStatus = tasks[todoListID]\n        //найдем нужную таску\n        let task = tasksForChangeStatus.find(t => t.id === taskID);\n        //изменим таску если она нашлась\n        if (task) {\n            task.title = newValue;\n            // засетаем в стейт копию объекта, чтобы React отреагировал и перерисовал\n            setTasks({...tasks});\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed style={{margin: '20px'}}>\n                <Grid container>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todoLists.map(tl => {\n                            let tasksForTodolist = tasks[tl.id];\n\n                            if (tl.filter === \"active\") {\n                                tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\n                            }\n                            if (tl.filter === \"completed\") {\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone);\n                            }\n                            return <Grid item >\n                                <Paper elevation={3} style={ {margin: '10px'}}>\n                                    <Todolist title={tl.title}\n                                              key={tl.id}\n                                              id={tl.id}\n                                              tasks={tasksForTodolist}\n                                              removeTask={removeTask}\n                                              changeFilter={changeFilter}\n                                              addTask={addTask}\n                                              changeTaskStatus={changeStatus}\n                                              filter={tl.filter}\n                                              removeTodoList={removeTodoList}\n                                              changeTaskTitle={changeTaskTitle}\n                                              changeTodoListTitle={changeTodoListTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}