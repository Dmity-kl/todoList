{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","onBlur","onChangeValue","autoFocus","event","onDoubleClick","Todolist","newTitle","changeTodoListTitle","id","removeTodoList","tasks","map","t","key","isDone","type","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","todoListTask","task","todoListTasks","changeStatus","taskID","find","todoList","tl","removedTodoList","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0f643785.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <input value={title}\r\n               onChange={onChangeHandler}\r\n               onKeyPress={onKeyPressHandler}\r\n               className={error ? \"error\" : \"\"}\r\n        />\r\n        <button onClick={addTask}>+</button>\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeValue: (newValue: string) => void\r\n\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChangeValue(title)\r\n    }\r\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) => setTitle(event.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <input value={title}\r\n                 onBlur={deactivateEditMode}\r\n                 autoFocus\r\n                   onChange={onChangeTitleHandler}\r\n        />\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from 'react';\nimport {FilterValuesType} from './App';\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todoListID: string) => void\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListID: string) => void\n    changeTaskTitle: (taskId: string, newValue: string, todoListID: string) => void\n    filter: FilterValuesType\n    id: string\n    removeTodoList: (todoListID: string) => void\n    changeTodoListTitle: (newTitle: string, todoListID:string)=>void\n}\n\nexport function Todolist(props: PropsType) {\n\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\n    const removeTodoList = () => {\n        props.removeTodoList(props.id)\n    }\n    const ChangeTodoListTitle = (newTitle:string) => {\n        props.changeTodoListTitle(newTitle, props.id)\n    }\n    //help\n    const addTask = (title: string) => {\n        props.addTask(title, props.id)\n    }\n\n    return <div>\n        <h3> <EditableSpan title={props.title} onChangeValue={ChangeTodoListTitle}/>\n            <button onClick={removeTodoList}>X</button>\n        </h3>\n\n        <AddItemForm addItem={addTask}/>\n        <ul>\n            {\n                props.tasks.map(t => {\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                        props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\n                    }\n                    const onChangeTitleHandler = (newValue: string) => {\n                        props.changeTaskTitle(t.id, newValue, props.id);\n                    }\n\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\n                        <input type=\"checkbox\"\n                               onChange={onChangeStatusHandler}\n                               checked={t.isDone}/>\n                        <EditableSpan title={t.title}\n                                      onChangeValue={onChangeTitleHandler}\n                        />\n                        <button onClick={onClickHandler}>x</button>\n                    </li>\n                })\n            }\n        </ul>\n        <div>\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\n                    onClick={onAllClickHandler}>All\n            </button>\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\n                    onClick={onActiveClickHandler}>Active\n            </button>\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\n                    onClick={onCompletedClickHandler}>Completed\n            </button>\n        </div>\n    </div>\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from './Todolist';\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./AddItemForm\";\n\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\ntype TodoListsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\ntype TasksStateType = {\n    [key: string] : Array<TaskType>\n}\n\nfunction App() {\n\n    let todoListID1 = v1()\n    let todoListID2 = v1()\n    let [todoLists, setTodoLists] = useState<Array<TodoListsType>>([\n        {\n            id: todoListID1,\n            title: 'What to learn',\n            filter: 'all'\n        },\n        {\n            id: todoListID2,\n            title: 'What to buy',\n            filter: 'all'\n        }\n    ])\n\n    let [tasks, setTasks] = useState<TasksStateType>({\n        [todoListID1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Rest API\", isDone: false},\n            {id: v1(), title: \"GraphQL\", isDone: false},\n        ], [todoListID2]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Rest API\", isDone: false},\n            {id: v1(), title: \"GraphQL\", isDone: false},\n        ]\n    });\n\n    function removeTask(id: string, todoListID: string) {\n        let todoListTask = tasks[todoListID]\n        tasks[todoListID] = todoListTask.filter(t => t.id !== id);\n        setTasks({...tasks});\n    }\n\n    function addTask(title: string, todoListID: string) {\n        let task = {id: v1(), title: title, isDone: false}\n        let todoListTasks = tasks[todoListID]\n        tasks[todoListID] = [task, ...todoListTasks]\n        setTasks({...tasks})\n    }\n\n    function changeStatus(taskID : string, isDone: boolean, todoListID: string) {\n        //достаем нужный массив по todoLitID\n        let tasksForChangeStatus = tasks[todoListID]\n        //найдем нужную таску\n        let task = tasksForChangeStatus.find(t => t.id === taskID);\n        if (task) {\n            //изменим таску если она нашлась\n            task.isDone = isDone;\n            // засетаем в стейт копию объекта, чтобы React отреагировал и перерисовал\n            setTasks({...tasks});\n        }\n    }\n\n    function changeFilter(value: FilterValuesType, todoListID: string) {\n        let todoList = todoLists.find(tl => tl.id === todoListID)\n        if (todoList) {\n            todoList.filter = value\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function removeTodoList(todoListID: string){\n        let removedTodoList = todoLists.filter(tl => tl.id !== todoListID)\n        delete tasks[todoListID]\n        setTodoLists(removedTodoList)\n    }\n    function changeTodoListTitle(newTitle: string, todoListID:string){\n        const todoList = todoLists.find(tl => tl.id === todoListID)\n        if (todoList){\n            todoList.title = newTitle\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function addTodoList(title: string){\n        let todoList: TodoListsType = {\n            id: v1(),\n            title: title,\n            filter: \"all\",\n        }\n        setTodoLists([todoList, ...todoLists])\n        setTasks({...tasks, [todoList.id] : []})\n    }\n\n    function changeTaskTitle(taskID : string, newValue: string, todoListID: string) {\n        //достаем нужный массив по todoLitID\n        let tasksForChangeStatus = tasks[todoListID]\n        //найдем нужную таску\n        let task = tasksForChangeStatus.find(t => t.id === taskID);\n        //изменим таску если она нашлась\n        if (task) {\n            task.title = newValue;\n            // засетаем в стейт копию объекта, чтобы React отреагировал и перерисовал\n            setTasks({...tasks});\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <AddItemForm addItem={addTodoList} />\n            {\n                todoLists.map(tl => {\n                    let tasksForTodolist = tasks[tl.id];\n\n                    if (tl.filter === \"active\") {\n                        tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\n                    }\n                    if (tl.filter === \"completed\") {\n                        tasksForTodolist = tasksForTodolist.filter(t => t.isDone);\n                    }\n                    return <Todolist title={tl.title}\n                                     key={tl.id}\n                                     id={tl.id}\n                                     tasks={tasksForTodolist}\n                                     removeTask={removeTask}\n                                     changeFilter={changeFilter}\n                                     addTask={addTask}\n                                     changeTaskStatus={changeStatus}\n                                     filter={tl.filter}\n                                     removeTodoList={removeTodoList}\n                                     changeTaskTitle={changeTaskTitle}\n                                     changeTodoListTitle={changeTodoListTitle}\n                    />\n                })\n            }\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}